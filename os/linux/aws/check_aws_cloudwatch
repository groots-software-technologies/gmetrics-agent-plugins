#!/bin/bash
#######################################################
# Program: Gmetrics monitoring plugins listing.
#
# Purpose:
#  Check server health and process using gmetrics plugins.
#  can be run in interactive.
#
# License:
#  This program is distributed in the hope that it will be useful,
#  but under groots software technologies @rights.
#
#######################################################

# Check for people who need help - aren't we all nice ;-)
#######################################################

#Set script name
#######################################################
SCRIPTNAME=`basename $0`

# Import Hostname
#######################################################
HOSTNAME=$(hostname)

# type command is checking whether aws, jq, bc, timeout command present or not.
#######################################################
# check pre-requisite for fetch AWS cloud watch metrics, below packages must install without this plugin won't run.
# type command is checking whether jq, aws, bc and timeout or gtimeout present or not.
type jq >/dev/null 2>&1 || { echo >&2 "This plugin require "jq" package, but it's not installed. Aborting."; exit 1; }
type aws >/dev/null 2>&1 || { echo >&2 "This plugin require "awscli" package, but it's not installed. Aborting."; exit 1; }
type bc >/dev/null 2>&1 || { echo >&2 "This plugin require "bc" package, but it's not installed. Aborting."; exit 1; }
type timeout >/dev/null 2>&1 || type gtimeout >/dev/null 2>&1 || { echo >&2 "This plugin require "timeout or gtimeout" package, but neither is installed. Aborting."; exit 1; }

# Usage details
#######################################################

if [ "${1}" = "--help" -o "${#}" != "16" ];
       then
       echo -e "Usage: $SCRIPTNAME -p [Profile Name] -r [Region] -n [Name Space] -m [Metric Name] -t [Minutes] -d [Dimensions] -w [Value] -c [Value]

        OPTION          DESCRIPTION
        ------------------------------------------------------------------------------------------------------
	--help          		    		Help
	-p [Profile Name]				--profile (Which AWS profile should be used to connect to aws?)
	-r [Region]					--region (example: "eu-west-1") (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html)
	-n [Name Space]					--namespace (Example: "CloudFront", "EC2", "Firehose", "EBS", or "RDS".)
	-m [Metric Name]				--metric-name (Instance Metrics Names)
	-t [Minutes]					--mins (Minutes window: Minutes Must be greater than or equals to 10,If metrics is "BurstBalance" then Minutes window: Minutes Must be greater than or equals to 15)
	-d [Dimensions]					--dimensions Server Identity(1.auto-scalinggroupname, 2.ImageID, 3.InstanceID, 4.InstanceType) (Name=InstanceId,Value=<InstanceID Value>)
							EX::(Name=InstanceId,Value=i-0be32b91acxxxxxxx)
							Name=DBInstanceIdentifier,Value=i-1235534
							Name=DeliveryStreamName,Value=MyStream
	-w [Value]					--Warning Threshold.
	-c [Value]					--Critical Threshold.
        ------------------------------------------------------------------------------------------------------

        Usage: ./$SCRIPTNAME -p groots -r ap-west-1 -n EC2 -m CPUUtilization -t 15 -d "InstanceId,i-0be32b9xxxxxx" -w 30 -c 50

Note : [VALUE] must be an integer.";
       exit 3;
fi

#######################################################
# Get user-given variables
#######################################################

while getopts "p:r:n:m:t:s:d:w:c:" Input;
do
	case ${Input} in
	p)      PROFILENAME=${OPTARG};;
	r)      REGION=${OPTARG};;
	n)     	NAMESPACE=${OPTARG};;
	m)     	METRICSNAME=${OPTARG};;
	t)      MINUTES=${OPTARG};;
	d)     	DIMENSIONS=${OPTARG};;
	w)      IWARN=${OPTARG};;
	c)      ICRIT=${OPTARG};;
       	*)      echo "Usage: $SCRIPTNAME -p groots -r ap-west-1 -n EC2 -m CPUUtilization -t 15 -d "InstanceId,i-0be32b9xxxxxx" -w 30 -c 50"
               exit 3
               ;;
       esac
done

# Parameter parsing.
# Period must be greater than 600 seconds (9 min) minimum..
#######################################################

if [ $MINUTES -le 14 ]
then
	echo "Minutes window: Metrics Minutes Must be greater than or equals to 15."
        exit 3
else
        MINUTES=$MINUTES
fi

#######################################################
# Main Logic
#######################################################

#statistics (Possible values: Sum, Average, Maximum, Minimum, SampleCount)
#######################################################
STATISTICS="Average"
TIMEOUTSEC="0"
NAMESPACE="AWS/$NAMESPACE"

# Compare and Convert time
#######################################################
case ${MINUTES} in
	*)
	    MINUTES="${MINUTES}"
	    unamestr=`uname`
        # Create files to compare against
	    if [[ "$unamestr" == 'Darwin' ]]; then
	        START_TIME=$(date -v-${MINUTES}M -u +'%Y-%m-%dT%H:%M:%S')
	        #START_TIME=$(date -v-${MINUTES}M -u +'%Y-%m-%dT%H:%M:00')
	    else
	        START_TIME=$(date -u +'%Y-%m-%dT%H:%M:%S' -d "-${MINUTES} minutes")
	        #START_TIME=$(date -u +'%Y-%m-%dT%H:%M:00' -d "-${MINUTES} minutes")
	    fi

        	END_TIME=$(date -u +'%Y-%m-%dT%H:%M:%S')
	        #SECONDS=$((60 * ${MINUTES}));
	        SECONDS=`echo "60 * ${MINUTES}"|bc`
	    shift ;
	    ;;
esac

# Separate dimensions name and value in proper format.
#######################################################
if [ $NAMESPACE == "AWS/S3" ]
then
	DIMENSIONSNAME=`echo $DIMENSIONS | awk -F "," '{print $1}'`
	DIMENSIONSVALUE=`echo $DIMENSIONS | awk -F "," '{print $2}'`
	DIMENSIONSVALUES3=`echo $DIMENSIONS | awk -F "," '{print $3","$4}'`
	DIMENSIONS="Name=$DIMENSIONSNAME,Value=$DIMENSIONSVALUE $DIMENSIONSVALUES3"
else
	DIMENSIONSNAME=`echo $DIMENSIONS | awk -F "," '{print $1}'`
	DIMENSIONSVALUE=`echo $DIMENSIONS | awk -F "," '{print $2}'`
	DIMENSIONS="Name=$DIMENSIONSNAME,Value=$DIMENSIONSVALUE"
fi

# Main command to fetch cloudwatch metric.
#######################################################
COMMAND="/usr/local/bin/aws --profile "$PROFILENAME" cloudwatch get-metric-statistics"
COMMAND="${COMMAND} --region ${REGION}"
COMMAND="${COMMAND} --namespace ${NAMESPACE}";
COMMAND="${COMMAND} --metric-name ${METRICSNAME}";
COMMAND="${COMMAND} --output json";
#COMMAND="${COMMAND} --output text";
COMMAND="${COMMAND} --start-time ${START_TIME}";
COMMAND="${COMMAND} --end-time ${END_TIME}";
COMMAND="${COMMAND} --period ${SECONDS}";
COMMAND="${COMMAND} --statistics ${STATISTICS}";
COMMAND="${COMMAND} --dimensions ${DIMENSIONS}";

# Timeout function define.
#######################################################
if type timeout >/dev/null 2>&1;
then
    TIMEOUTCMD=timeout;
else
    TIMEOUTCMD=gtimeout;
fi

if [[ ${TIMEOUTSEC} -gt 0 ]];
then
    COMMAND="${TIMEOUTCMD} ${TIMEOUTSEC} ${COMMAND}";

    RESULT=$(${COMMAND});

    # command timed out ?
    if [[ $? -eq 124 ]];
    then
        echo "UNKNOWN - We failed to retrieve results within ${TIMEOUTSEC} seconds."
        exit 3;
    fi
else
    RESULT=$(${COMMAND});
fi

# Conver in to UNIT and Values.
#######################################################
METRICSVALUE=$(echo ${RESULT} | jq ".Datapoints[0].${STATISTICS}")
UNIT=$(echo ${RESULT} | jq -r ".Datapoints[0].Unit")
DESCRIPTION=$(echo ${RESULT} | jq ".Label")

#######################################################
OUTPUT=`echo "Name=$DIMENSIONSNAME,Value=$DIMENSIONSVALUE $METRICSNAME ($MINUTES min $STATISTICS) is $METRICSVALUE" "$UNIT."`
#######################################################

if [[ "$METRICSNAME" != "BurstBalance" && "$METRICSNAME" != "FreeStorageSpace" && "$METRICSNAME" != "FreeLocalStorage" ]]
then
	if [ "${METRICSVALUE%%.*}" -le "$IWARN" ]
	then
        	STATUS="OK";
	        EXITSTAT=0;
	elif [ "${METRICSVALUE%%.*}" -ge "$IWARN" ]
        then
                if [ "${METRICSVALUE%%.*}" -gt "$ICRIT" ]
                then
                        STATUS="CRITICAL";
                        EXITSTAT=2;
                else
                        STATUS="WARNING";
                        EXITSTAT=1;
                fi
	else
        	STATUS="UNKNOWN";
	        EXITSTAT=3;
		OUTPUT=`echo "No output for Name=$DIMENSIONSNAME,Value=$DIMENSIONSVALUE $METRICSNAME"` 
	fi
else
	if [ "${METRICSVALUE%%.*}" -ge "$IWARN" ]
	then
        	STATUS="OK";
	        EXITSTAT=0;
	elif [ "${METRICSVALUE%%.*}" -le "$IWARN" ]
        then
                if [ "${METRICSVALUE%%.*}" -lt "$ICRIT" ]
                then
                        STATUS="CRITICAL";
                        EXITSTAT=2;
                else
                        STATUS="WARNING";
                        EXITSTAT=1;
                fi
	else
        	STATUS="UNKNOWN";
	        EXITSTAT=3;
		OUTPUT=`echo "No output for Name=$DIMENSIONSNAME,Value=$DIMENSIONSVALUE $METRICSNAME"`
		
fi
fi

echo "$STATUS - $OUTPUT|Perf=$METRICSVALUE"$UNIT";$IWARN;$ICRIT"
exit $EXITSTAT

# End Main Logic.
#######################################################
