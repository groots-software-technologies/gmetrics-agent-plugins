#!/bin/bash
#######################################################
# Program: Gmetrics monitoring plugins listing.
#
# Purpose:
#  Check S3 cloudwatch detailed metrics
#  can be run in interactive.
#
# License:
#  This program is distributed in the hope that it will be useful,
#  but under groots software technologies @rights.
#
#######################################################

# Check for people who need help - aren't we all nice ;-)
#######################################################

#Set script name
#######################################################
SCRIPTNAME=`basename $0`

# Import Hostname
#######################################################
HOSTNAME=$(hostname)

# type command is checking whether aws, jq, bc, timeout command present or not.
#######################################################
# check pre-requisite for fetch AWS cloud watch metrics, below packages must install without this plugin won't run.
# type command is checking whether jq, aws, bc and timeout or gtimeout present or not.
type jq >/dev/null 2>&1 || { echo >&2 "This plugin require "jq" package, but it's not installed. Aborting."; exit 1; }
type aws >/dev/null 2>&1 || { echo >&2 "This plugin require "awscli" package, but it's not installed. Aborting."; exit 1; }
type bc >/dev/null 2>&1 || { echo >&2 "This plugin require "bc" package, but it's not installed. Aborting."; exit 1; }
type timeout >/dev/null 2>&1 || type gtimeout >/dev/null 2>&1 || { echo >&2 "This plugin require "timeout or gtimeout" package, but neither is installed. Aborting."; exit 1; }

# Usage details
#######################################################

if [ "${1}" = "--help" -o "${#}" != "14" ];
       then
       echo -e "

     	OPTION   									DESCRIPTION
        ------------------------------------------------------------------------------------------------------
        --help                                          Help
        -p [Profile Name]                               --profile (Which AWS profile should be used to connect to aws?)
        -r [Region]                                     --region (example: "eu-west-1") (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html)
        -m [Metric Name]                                --metric-name (S3 Bucket advance metrics - AllRequests,GetRequests,ListRequests,HeadRequests,PutRequests)
        -t [Minutes]                                    --mins (Minutes window)
        -d [Dimensions]                                 --dimensions (for advance cloudwatch s3 metrics like (All,Get,List,Head,Put) Requests. Name=BucketName,Value=<Bucket_Name> Name=FilterId,Value=EntireBucket
	-w [Value]                                      --Warning Threshold.
        -c [Value]                                      --Critical Threshold.
        ------------------------------------------------------------------------------------------------------

        Usage: ./$SCRIPTNAME -p <Profile> -r <Region> -m <Metrics> -t 1440 -d "BucketName,testbucket" -w 3000 -c 5000
	Ex: ./$SCRIPTNAME -p default -r us-west-2 -m GetRequests -t 1440 -d "BucketName,testbucket" -w 3000 -c 5000
";
       exit 3;
fi

#######################################################
# Get user-given variables
#######################################################

while getopts "p:r:m:t:s:d:w:c:" Input;
do
        case ${Input} in
        p)      PROFILENAME=${OPTARG};;
        r)      REGION=${OPTARG};;
        n)      NAMESPACE=${OPTARG};;
        m)      METRICSNAME=${OPTARG};;
        t)      MINUTES=${OPTARG};;
        d)      DIMENSIONS=${OPTARG};;
        w)      IWARN=${OPTARG};;
        c)      ICRIT=${OPTARG};;
        *)      echo "Usage: $SCRIPTNAME -p groots -r ap-west-1 -m GetRequests -t 1440 -d "BucketName,testbucket" -w 3000 -c 5000"
               exit 3
               ;;
       esac
done

# Parameter parsing.
# Minutes should 1440 for 24 hours
# Period must be greater than 600 seconds (9 min) minimum..
#######################################################

if [ $MINUTES -le 1339 ]
then
        echo "Minutes window: Metrics Minutes Must be greater than or equals to 1440."
        exit 3
else
        MINUTES=$MINUTES
fi

#######################################################
# Main Logic
#######################################################

#statistics (Possible values: Sum)
#######################################################
STATISTICS="Sum"
TIMEOUTSEC="0"
NAMESPACE="AWS/S3"
DIMENSIONS_FIELD="Name=FilterId,Value=EntireBucket"

# Compare and Convert time
#######################################################
case ${MINUTES} in
        *)
            MINUTES="${MINUTES}"
            unamestr=`uname`
	# Create files to compare against
            if [[ "$unamestr" == 'Darwin' ]]; then
                START_TIME=$(date -v-${MINUTES}M -u +'%Y-%m-%dT%H:%M:%S')
            else
                START_TIME=$(date -u +'%Y-%m-%dT%H:%M:%S' -d "2 days ago")
            fi
		END_TIME=$( date -u +'%Y-%m-%dT%H:%M:%S' -d "-${MINUTES} minutes")
                SECONDS=`echo "60 * ${MINUTES}"|bc`
            shift ;
            ;;
esac

# Separate dimensions name and value in proper format.
#######################################################
if [ $NAMESPACE == "AWS/S3" ]
then
        DIMENSIONSNAME=`echo $DIMENSIONS | awk -F "," '{print $1}'`
        DIMENSIONSVALUE=`echo $DIMENSIONS | awk -F "," '{print $2}'`
        DIMENSIONS="Name=$DIMENSIONSNAME,Value=$DIMENSIONSVALUE"

fi

# Main command to fetch cloudwatch metric.
#######################################################
COMMAND="/usr/local/bin/aws --profile "$PROFILENAME" cloudwatch get-metric-statistics"
COMMAND="${COMMAND} --region ${REGION}"
COMMAND="${COMMAND} --namespace ${NAMESPACE}";
COMMAND="${COMMAND} --metric-name ${METRICSNAME}";
COMMAND="${COMMAND} --output json";
COMMAND="${COMMAND} --start-time ${START_TIME}";
COMMAND="${COMMAND} --end-time ${END_TIME}";
COMMAND="${COMMAND} --period ${SECONDS}";
COMMAND="${COMMAND} --statistics ${STATISTICS}";
COMMAND="${COMMAND} --dimensions ${DIMENSIONS} ${DIMENSIONS_FIELD}";

# Timeout function define.
#######################################################

if type timeout >/dev/null 2>&1;
then
    TIMEOUTCMD=timeout;
else
    TIMEOUTCMD=gtimeout;
fi

if [[ ${TIMEOUTSEC} -gt 0 ]];
then
    COMMAND="${TIMEOUTCMD} ${TIMEOUTSEC} ${COMMAND}";

    RESULT=$(${COMMAND});

    # Command timed out ?
	
    if [[ $? -eq 124 ]];
    then
        echo "UNKNOWN - We failed to retrieve results within ${TIMEOUTSEC} seconds."
        exit 3;
    fi
else
    RESULT=$(${COMMAND});
fi

# Convert in to UNIT and Values.
#######################################################

METRICSVALUE=$(echo ${RESULT} | jq ".Datapoints[0].${STATISTICS}")
UNIT=$(echo ${RESULT} | jq -r ".Datapoints[0].Unit")
DESCRIPTION=$(echo ${RESULT} | jq ".Label")

# For null value
#######################################################

if [ ${METRICSVALUE} == null ]
then
	echo "UNKNOWN - No data found."
	exit 3;
fi

#######################################################
OUTPUT=`echo "Name=$DIMENSIONSNAME,Value=$DIMENSIONSVALUE $METRICSNAME ($MINUTES min $STATISTICS) is $METRICSVALUE" "$UNIT."`
#######################################################

if [[ "$METRICSNAME" == "AllRequests" || "$METRICSNAME" == "GetRequests" || "$METRICSNAME" == "HeadRequests" || "$METRICSNAME" == "PutRequests" || "$METRICSNAME" == "ListRequests"  ]]
then


        if [ "${METRICSVALUE%%.*}" -le "$IWARN" ]
        then
                STATUS="OK";
                EXITSTAT=0;
        elif [ "${METRICSVALUE%%.*}" -ge "$IWARN" ]
        then
                if [ "${METRICSVALUE%%.*}" -gt "$ICRIT" ]
                then
                        STATUS="CRITICAL";
                        EXITSTAT=2;
                else
                        STATUS="WARNING";
                        EXITSTAT=1;
                fi
        else
                STATUS="UNKNOWN";
                EXITSTAT=3;
                OUTPUT=`echo "No output for Name=$DIMENSIONSNAME,Value=$DIMENSIONSVALUE $METRICSNAME"`
        fi


fi

echo "$STATUS - $OUTPUT|$METRICSNAME=$METRICSVALUE"$UNIT";$IWARN;$ICRIT"
exit $EXITSTAT

# End Main Logic.
#######################################################

