#!/bin/bash
#######################################################
# Program: Gmetrics monitoring plugins listing.
#
# Purpose:
#  Check server health and process using gmetrics plugins.
#  can be run in interactive.
#
# License:
#  This program is distributed in the hope that it will be useful,
#  but under groots software technologies @rights.
#
#######################################################

# Check for people who need help - aren't we all nice ;-)
#######################################################

#Set script name
#######################################################
SCRIPTNAME=`basename $0`

# Import Hostname
#######################################################
HOSTNAME=$(hostname)

# type command is checking whether sysstat, sar command present or not.
#######################################################
type sar >/dev/null 2>&1 || { echo >&2 "This plugin require "sysstat" package, but it's not installed. Aborting."; exit 3; }

# Usage details
#######################################################
if [ "${1}" = "--help" -o "${#}" != "4" ];
       then
       echo -e "Usage: $SCRIPTNAME -w [VALUE] -c [VALUE]

        OPTION          DESCRIPTION
        ----------------------------------
        --help                  Help
	-w [VALUE]      Warning Threshold Value in % 
        -c [VALUE]      Critical Threshold Value in %
        ----------------------------------

        Usage: $SCRIPTNAME -w 80 -c 90

Note : [VALUE] must be an integer.";
       exit 3;
fi

#######################################################
# Get user-given variables
#######################################################

while getopts "w:c:" OPT
do
        case $OPT in
        w) IWARN="$OPTARG" ;;
        c) ICRIT="$OPTARG" ;;
	*) echo "Usage: $SCRIPTNAME -w 80 -c 90"
           exit 3
           ;;
        esac
done

#######################################################
if [ $IWARN -gt $ICRIT ]
then
        echo "Warning value must be less than Critical Value or Use Help --help"
        exit 3
else
        IWARN=$IWARN
fi 

#######################################################
# Main Logic
#######################################################

SAR_OUTPUT=`sar 1 1 | grep -i average`

USER=`echo $SAR_OUTPUT | awk '{print $3}'`
SYS=`echo $SAR_OUTPUT | awk '{print $5}'`
INTUSER=`echo $USER | awk -F "." '{print $1}'`
INTSYS=`echo $SYS | awk -F "." '{print $1}'`

#######################################################
OUTPUT=`echo "cpu usage :user=${USER}%, system=${SYS}%"`
#######################################################

if [ "$INTUSER" -lt "$IWARN" -a "$INTSYS" -lt "$IWARN" ]
then
    STATUS="OK";
    EXIT=0;
elif [ "$INTUSER" -ge "$IWARN" -o "$INTSYS" -ge "$IWARN" ]
then
    if [ "$INTUSER" -ge "$ICRIT" -o "$INTSYS" -ge "$ICRIT" ]
	then
	    STATUS="CRITICAL";
	    EXIT=2;
	 else
	    STATUS="WARNING";
	    EXIT=1;
	 fi
else
    STATUS="UNKNOWN";
    EXIT=3;
fi

if [ $STATUS = "UNKNOWN" ]
then
	echo "$STATUS- No data found."
	EXIT=3; 
else
	echo "$STATUS- $OUTPUT|user=${USER}"%";$IWARN;$ICRIT;0;100 'system'=${SYS}"%";$IWARN;$ICRIT;0;100"
fi

exit $EXIT
# End Main Logic.
#######################################################
