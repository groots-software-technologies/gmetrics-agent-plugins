#!/bin/bash
#######################################################
# Program: To check JVM garbage collection time % used elasticsearch
#
# Purpose:
#  This script extracts jvm garbage collection time % using Elastic API
#  can be run in interactive.
#
########################################################

# Set script name
#######################################################
SCRIPTNAME=$(basename $0)

# Import Hostname
#######################################################
HOSTNAME=$(hostname)

# Usage details.
#########################################################

if [ "${1}" = "--help" -o "${#}" != "8" ];
then
echo -e "Usage: $SCRIPTNAME -u [username] -p [passowrd] -w [warning threshhold] -c [critical threshhold]
OPTION                   DESCRIPTION
-----------------------------------------
--help                   Help
-w [warning]             Warning value
-c [critical]            Critical value
-u [username]            Elastic Username
-p [password]            ElastiicPassword
-----------------------------------------
Usage: ./$SCRIPTNAME  -u [Elastic username] -p [Elastic passowrd] -w [warning threshhold] -c [critical threshhold] ";
exit 3;
fi


#########################################################
# Get user-given variables
#########################################################

while getopts "u:p:w:c:" Input;
do
case ${Input} in
u) USERNAME=${OPTARG};;
p) PASSWORD=${OPTARG};;
w) WARN=${OPTARG};;
c) CRIT=${OPTARG};;
*) echo "Usage: $SCRIPTNAME -u [username] -p [passowrd] -w [warning threshhold] -c [critical threshhold]"
exit 3;
;;
esac
done

# Threshold value comparison
#######################################################

if [ $WARN -gt $CRIT ]
then
echo "CRITICAL threshold value is less than WARNING threshold."
exit 3;
fi

# Command to extract garbage collection using Elastic api
#######################################################

ELASTICCMD=`curl -v --silent -X GET -u $USERNAME:$PASSWORD http://localhost:9200/_nodes/stats/jvm?pretty 2>&1`

GCTIME_TOTAL_MS=`echo -n "$ELASTICCMD" | grep -w "uptime_in_millis" | awk '{print $3}' | sed 's/,$//'`
GCTIME_TOTAL_SEC=$(($GCTIME_TOTAL_MS / 1000))
PID=`ps -elf | grep elasticsearch | head -n 1 | awk '{print $4}'`
GCTIME_MS=`echo -n "$ELASTICCMD" | grep -w "collection_time_in_millis"  | head -n 1 | awk '{print $3}' | sed 's/,$//'`
GCTIME_MS_SEC=$(($GCTIME_MS / 1000))

GCTIME_PER=$((GCTIME_MS_SEC / GCTIME_TOTAL_SEC))

#########################################################
OUTPUT=" ELASTICSEARCH JVM PID=$PID, Totaltime=$GCTIME_TOTAL_SEC secs, Garbagecollection=$GCTIME_MS_SEC secs, $GCTIME_PER"%" used | Gctime=${GCTIME_PER}"%";$WARN;$CRIT;"
#########################################################

if [ "$GCTIME_PER" -le "$WARN" ]
then
        STATUS="OK";
        EXITSTAT=0;

        elif [ "$GCTIME_PER" -gt "$WARN" ]
        then
                if [ "$GCTIME_PER" -gt "$CRIT" ]
                then
                STATUS="CRITICAL";
                EXITSTAT=2;
                else
                STATUS="WARNING";
                EXITSTAT=1;
                fi
else
        STATUS="UNKNOWN";
        EXITSTAT=3;
fi

if [ "$STATUS" = "UNKNOWN" ]
then
        echo "$STATUS- No data Found."
fi

echo "$STATUS - $OUTPUT"
exit $EXITSTAT

# End main logic.
#########################################################
